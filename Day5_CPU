https://myth.makerchip.com/sandbox/0OYfAhA6w/0xGh163

|cpu
      ///imem[7:0]
         //@1
            //$instr[31:0] = ...;
            
      @0
         $reset = *reset;
         $start = (!$reset) & >>1$reset;
         $pc[31:0] = (>>1$reset == 1) ? 0 : (>>3$valid_taken_br) ? >>3$br_tgt_pc : >>3$inc_pc ;
         $imem_rd_en = !$reset;
         $imem_rd_addr[M4_IMEM_INDEX_CNT-1:0] = $pc[M4_IMEM_INDEX_CNT+1:2];
         
      @1
         //PC increment logic
         $inc_pc[31:0] = $pc + 32'd4;
         //fetch logic
         //?$imem_rd_en
         //   $imem_rd_data[31:0] = /imem[$imem_rd_addr]$instr;
         $instr[31:0] = $imem_rd_data[31:0];
         //decode logic
         $is_i_instr = $instr[6:2] ==? 5'b0000x || $instr[6:2] ==? 5'b00100 || $instr[6:2] ==? 5'b00110;
         $is_r_instr = $instr[6:2] ==? 5'b01011 || $instr[6:2] ==? 5'b01100 || $instr[6:2] ==? 5'b01110;
         $is_s_instr = $instr[6:2] ==? 5'b01000 || $instr[6:2] ==? 5'b01001;
         $is_b_instr = $instr[6:2] ==? 5'b11000;
         $is_j_instr = $instr[6:2] ==? 5'b11011;
         $is_u_instr = $instr[6:2] ==? 5'b00101 || $instr[6:2] ==? 5'b01101;
         //immediate bit
         $imm[31:0] = $is_i_instr ? {{21{$instr[31]}}, $instr[30:20]} : $is_s_instr ? {{21{$instr[31]}}, $instr[30:25], $instr[11:8], $instr[7]} : $is_b_instr ? {{19{$instr[31]}}, {2{$instr[7]}}, $instr[30:25], $instr[11:8], 1'b0 } : $is_u_instr ? {$instr[31], $instr[30:12], 12'b0 } : $is_j_instr ? {{11{$instr[31]}}, $instr[19:12], {2{$instr[20]}}, $instr[30:21], 1'b0 } : 32'b0; 
         // 
         //other fields
         $opcode = $instr[6:0];
         $rd_valid = $is_i_instr || $is_r_instr || $is_u_instr || $is_j_instr;
         ?$rd_valid
            $rd[4:0] = $instr[11:7];
         $rs2_valid = $is_r_instr || $is_s_instr || $is_b_instr;
         ?$rs2_valid
            $rs2[4:0] = $instr[24:20];
         $rs1_valid = $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
         ?$rs1_valid
            $rs1[4:0] = $instr[19:15];
         $funct3_valid = $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
         ?$funct3_valid
            $funct3[2:0] = $instr[14:12];
         ?$is_r_instr
            $funct7[6:0] = $instr[31:25];
            
         //decode relevant instructions
         $dec_bits[10:0] = {$funct7[5], $funct3, $opcode};
         $is_beq = $dec_bits ==? 11'bx_000_1100011;
         $is_bne = $dec_bits ==? 11'bx_001_1100011;
         $is_blt = $dec_bits ==? 11'bx_100_1100011;
         $is_bge = $dec_bits ==? 11'bx_101_1100011;
         $is_bltu = $dec_bits ==? 11'bx_110_1100011;
         $is_bgeu = $dec_bits ==? 11'bx_111_1100011;
         $is_addi = $dec_bits ==? 11'bx_000_0010011;
         $is_add = $dec_bits ==? 11'b0_000_0110011;
      @2
         //Register file read 
         $rf_rd_en1 = >>1$rs1_valid;
         $rf_rd_en2 = >>1$rs2_valid;
         $rf_rd_index1[4:0] = >>1$rs1; 
         $rf_rd_index2[4:0] = >>1$rs2;
         
         //ALU Inputs
         $src1_value = $rf_rd_data1;
         $src2_value = $rf_rd_data2;
         
         //ALU result
         $result[31:0] = $is_addi ? $src1_value + $imm : $is_add ? $src1_value + $src2_value : 32'bx;
      @3
         //Register file write
         $rf_wr_en = $rd ? $rd_valid: 1'bx;
         $rf_wr_index[4:0] = $rd;
         
         $rf_wr_data[31:0] = $result[31:0];
         
         //Branches - is conditional
         $taken_br = $is_beq;
         //giving error 
         //$taken_br = $is_beq ? ($src1_value == $src2_value): $is_bne ? ($src1_value != $src2_value): $is_blt ? (($src1_value < $src2_value) ^ ($src1_value[31] != $src2_value[31])): $is_bge ? (($src1_value >= $src2_value) ^ ($src1_value[31] != $src2_value[31])): $is_bltu ? ($src1_value < $src2_value): $is_bgeu ? ($src1_value >= $src2_value) : 1'b0; 

         $valid = $reset ? 1'b0 : $start ? 1 : >>2$valid;
         $valid_taken_br = $valid && $taken_br;
         $br_tgt_pc[31:0] = $pc[31:0] + $imm[31:0];
         
         
      // YOUR CODE HERE
      // ...

      // Note: Because of the magic we are using for visualisation, if visualisation is enabled below,
      //       be sure to avoid having unassigned signals (which you might be using for random inputs)
      //       other than those specifically expected in the labs. You'll get strange errors for these.

   
   // Assert these to end simulation (before Makerchip cycle limit).
   //*passed = *cyc_cnt > 40;
   //*failed = 1'b0;
   
   // Macro instantiations for:
   //  o instruction memory
   //  o register file
   //  o data memory
   //  o CPU visualization
   |cpu
      m4+imem(@1)    // Args: (read stage)
      m4+rf(@2, @3)  // Args: (read stage, write stage) - if equal, no register bypass is required
      //m4+dmem(@4)    // Args: (read/write stage)

   m4+cpu_viz(@4)    // For visualisation, argument should be at least equal to the last stage of CPU logic. @4 would work for all labs.
\SV
